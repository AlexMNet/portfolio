generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Project {
  id String @id @default(cuid())
  userId String @map("user_id")
  slug String @unique
  title String @unique
  type String
  blurb String?
  markdown String?
  images Image[]
  technologies Technology[]
  youtube_link String?
  github_link String?
  live_link String?
  published Boolean @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())


}

model Technology {
  id String @id @default(cuid())
  name String @unique
  projects Project[]
}

model Image {
  id String @id @default(cuid())
  projectId String @map("project_id")
  src String 
  type ImageType
  public_id String
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)


  @@index([projectId])
}

enum ImageType {
  modal
  card
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
